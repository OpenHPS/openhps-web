{"version":3,"file":"web/openhps-web-sensors.min.js","mappings":"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","sources":["webpack://OpenHPS.sensors/webpack/universalModuleDefinition","webpack://OpenHPS.sensors/./dist/cjs/index.js","webpack://OpenHPS.sensors/./dist/cjs/legacy/SensorSourceNode.js","webpack://OpenHPS.sensors/./dist/cjs/web/SensorSourceNode.js","webpack://OpenHPS.sensors/external umd {\"commonjs\":\"@openhps/core\",\"commonjs2\":\"@openhps/core\",\"amd\":\"core\",\"root\":[\"OpenHPS\",\"core\"]}","webpack://OpenHPS.sensors/webpack/bootstrap","webpack://OpenHPS.sensors/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@openhps/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"OpenHPS\", [\"core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OpenHPS\"] = factory(require(\"@openhps/core\"));\n\telse\n\t\troot[\"OpenHPS\"] = root[\"OpenHPS\"] || {}, root[\"OpenHPS\"][\"sensors\"] = factory(root[\"OpenHPS\"][\"core\"]);\n})((typeof self !== 'undefined' ? self : this), (__WEBPACK_EXTERNAL_MODULE__0__) => {\nreturn ","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst SensorSourceNode_1 = require(\"./web/SensorSourceNode\");\r\nconst SensorSourceNode_2 = require(\"./legacy/SensorSourceNode\");\r\nmodule.exports = ('Accelerometer' in window ? { SensorSourceNode: SensorSourceNode_1.SensorSourceNode } : { SensorSourceNode: SensorSourceNode_2.SensorSourceNode });\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SensorSourceNode = void 0;\r\nconst core_1 = require(\"@openhps/core\");\r\n/**\r\n * IMU source using the HTML5 browser API for device motion and device orientation.\r\n *\r\n * @category Source node\r\n */\r\nclass SensorSourceNode extends core_1.SourceNode {\r\n    constructor(options) {\r\n        var _a;\r\n        super(options);\r\n        this.options.source = (_a = this.options.source) !== null && _a !== void 0 ? _a : new core_1.DataObject(this.uid);\r\n        if (this.options.autoStart) {\r\n            this.once('build', this.start.bind(this));\r\n        }\r\n        this.once('destroy', this.stop.bind(this));\r\n    }\r\n    requestPermission() {\r\n        return Promise.resolve();\r\n    }\r\n    start() {\r\n        return new Promise((resolve) => {\r\n            const sensorUID = this.source ? this.source.uid : this.uid;\r\n            window.addEventListener('devicemotion', (event) => {\r\n                // Create a new data frame for the orientation change\r\n                const dataFrame = new core_1.DataFrame();\r\n                const frequency = 1000 / event.interval;\r\n                dataFrame.addSensor(new core_1.Accelerometer(sensorUID + '_accl', new core_1.Acceleration(event.accelerationIncludingGravity.x, event.accelerationIncludingGravity.y, event.accelerationIncludingGravity.z), frequency));\r\n                dataFrame.addSensor(new core_1.Gyroscope(sensorUID + '_gyro', new core_1.AngularVelocity(event.rotationRate.beta, event.rotationRate.gamma, event.rotationRate.alpha), frequency));\r\n                dataFrame.addSensor(new core_1.Accelerometer(sensorUID + '_linearaccl', new core_1.Acceleration(event.acceleration.x, event.acceleration.y, event.acceleration.z), frequency));\r\n                const source = this.source;\r\n                source.getPosition().angularVelocity = dataFrame.getSensor(core_1.Gyroscope).value;\r\n                dataFrame.addSensor(new core_1.AbsoluteOrientationSensor(sensorUID + '_orientation', source.getPosition().orientation));\r\n                dataFrame.source = source;\r\n                this.push(dataFrame);\r\n            }, true);\r\n            window.addEventListener('deviceorientation', (event) => {\r\n                const source = this.source;\r\n                source.getPosition().orientation = core_1.Orientation.fromEuler([event.beta, event.gamma, event.alpha]);\r\n            });\r\n            this.logger('debug', 'Browser orientation and motion events registered!');\r\n            resolve();\r\n        });\r\n    }\r\n    stop() {\r\n        return Promise.resolve();\r\n    }\r\n    onPull() {\r\n        return new Promise((resolve) => {\r\n            resolve(undefined);\r\n        });\r\n    }\r\n}\r\nexports.SensorSourceNode = SensorSourceNode;\r\n//# sourceMappingURL=SensorSourceNode.js.map","\"use strict\";\r\n/// <reference types=\"web\" />\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SensorSourceNode = void 0;\r\nconst core_1 = require(\"@openhps/core\");\r\n/**\r\n * Sensor source node using Web Sensor API.\r\n */\r\nclass SensorSourceNode extends core_1.SourceNode {\r\n    constructor(options) {\r\n        super(options);\r\n        this._subscriptions = new Map();\r\n        this._values = new Map();\r\n        this._lastPush = 0;\r\n        this._running = false;\r\n        this.options.interval = this.options.interval || 100;\r\n        if (this.options.autoStart) {\r\n            this.once('build', this.start.bind(this));\r\n        }\r\n        this.once('destroy', this.stop.bind(this));\r\n    }\r\n    requestPermission() {\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all(this.options.sensors\r\n                .map((sensor) => this.getPermissions(sensor).map((permission) => navigator.permissions.query({ name: permission })))\r\n                .reduce((a, b) => [...a, ...b]))\r\n                .then((results) => {\r\n                if (results.every((result) => result.state === 'granted')) {\r\n                    resolve();\r\n                }\r\n                else {\r\n                    reject(new Error(`No permission to use the required sensors!`));\r\n                }\r\n            })\r\n                .catch(reject);\r\n        });\r\n    }\r\n    start() {\r\n        return new Promise((resolve) => {\r\n            this._running = true;\r\n            if (this._subscriptions.size > 0) {\r\n                return resolve();\r\n            }\r\n            this.options.sensors.forEach((sensor) => {\r\n                const SensorType = this.findSensor(sensor);\r\n                const sensorInstance = new SensorType({\r\n                    frequency: Math.round(1000 / this.options.interval),\r\n                });\r\n                sensorInstance.addEventListener('reading', (value) => {\r\n                    if (!this._running)\r\n                        return;\r\n                    this._values.set(sensor, value);\r\n                    if (this._isUpdated()) {\r\n                        this._lastPush = core_1.TimeService.now();\r\n                        this.createFrame().catch((ex) => {\r\n                            this.logger('error', 'Unable to create sensor data frame!', ex);\r\n                        });\r\n                    }\r\n                });\r\n                sensorInstance.start();\r\n                this._subscriptions.set(sensor, sensorInstance);\r\n            });\r\n            resolve();\r\n        });\r\n    }\r\n    _isUpdated() {\r\n        return (Array.from(this._values.values()).filter((sensor) => sensor.timestamp > this._lastPush).length ===\r\n            this.options.sensors.length);\r\n    }\r\n    stop() {\r\n        return new Promise((resolve) => {\r\n            if (this.options.softStop) {\r\n                this._running = false;\r\n            }\r\n            else {\r\n                this._subscriptions.forEach((value) => value.stop());\r\n                this._subscriptions = new Map();\r\n                this._values = new Map();\r\n            }\r\n            resolve();\r\n        });\r\n    }\r\n    createFrame() {\r\n        return new Promise((resolve) => {\r\n            const dataFrame = new core_1.DataFrame();\r\n            dataFrame.source = this.source;\r\n            const acceleration = this._values.get(core_1.Accelerometer);\r\n            const linearAcceleration = this._values.get(core_1.LinearAccelerationSensor);\r\n            const gyroscope = this._values.get(core_1.Gyroscope);\r\n            const orientation = this._values.get(core_1.AbsoluteOrientationSensor);\r\n            const relativeOrientation = this._values.get(core_1.RelativeOrientationSensor);\r\n            const magnetometer = this._values.get(core_1.Magnetometer);\r\n            const sourceUID = this.source ? this.source.uid : this.uid;\r\n            const frequency = 1000 / this.options.interval;\r\n            if (acceleration) {\r\n                dataFrame.addSensor(new core_1.Accelerometer(sourceUID + '_accel', new core_1.Acceleration(acceleration.x, acceleration.y, acceleration.z), frequency));\r\n            }\r\n            if (linearAcceleration) {\r\n                dataFrame.addSensor(new core_1.LinearAccelerationSensor(sourceUID + '_linearaccel', new core_1.Acceleration(linearAcceleration.x, linearAcceleration.y, linearAcceleration.z), frequency));\r\n            }\r\n            if (gyroscope) {\r\n                dataFrame.addSensor(new core_1.Gyroscope(sourceUID + '_gyro', new core_1.AngularVelocity(gyroscope.x, gyroscope.y, gyroscope.z, core_1.AngularVelocityUnit.RADIAN_PER_SECOND), frequency));\r\n            }\r\n            if (orientation) {\r\n                dataFrame.addSensor(new core_1.AbsoluteOrientationSensor(sourceUID + '_absoluteorientation', core_1.Orientation.fromQuaternion(new core_1.Quaternion(...orientation.quaternion)), frequency));\r\n            }\r\n            if (relativeOrientation) {\r\n                dataFrame.addSensor(new core_1.RelativeOrientationSensor(sourceUID + '_relativeorientation', core_1.Orientation.fromQuaternion(new core_1.Quaternion(...relativeOrientation.quaternion)), frequency));\r\n            }\r\n            if (magnetometer) {\r\n                dataFrame.addSensor(new core_1.Magnetometer(sourceUID + '_mag', new core_1.Magnetism(magnetometer.x, magnetometer.y, magnetometer.z), frequency));\r\n            }\r\n            this.push(dataFrame);\r\n            resolve();\r\n        });\r\n    }\r\n    onPull() {\r\n        return new Promise((resolve) => {\r\n            resolve(undefined);\r\n        });\r\n    }\r\n    findSensor(sensor) {\r\n        switch (sensor) {\r\n            case core_1.RelativeOrientationSensor:\r\n                return RelativeOrientationSensor;\r\n            case core_1.AbsoluteOrientationSensor:\r\n                return AbsoluteOrientationSensor;\r\n            case core_1.LinearAccelerationSensor:\r\n                return LinearAccelerationSensor;\r\n            // case SensorType.AMBIENT_LIGHT:\r\n            //     return AmbientLightSensor;\r\n            case core_1.Gyroscope:\r\n                return Gyroscope;\r\n            case core_1.Magnetometer:\r\n                return Magnetometer;\r\n            case core_1.Accelerometer:\r\n                return Accelerometer;\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n    getPermissions(sensor) {\r\n        switch (sensor) {\r\n            // case SensorType.AMBIENT_LIGHT:\r\n            //     return [\"ambient-light-sensor\"];\r\n            case core_1.RelativeOrientationSensor:\r\n            case core_1.AbsoluteOrientationSensor:\r\n                return ['gyroscope', 'accelerometer', 'magnetometer'];\r\n            case core_1.Gyroscope:\r\n                return ['gyroscope'];\r\n            case core_1.Magnetometer:\r\n                return ['magnetometer'];\r\n            case core_1.LinearAccelerationSensor:\r\n            case core_1.Accelerometer:\r\n                return ['accelerometer'];\r\n            default:\r\n                return undefined;\r\n        }\r\n    }\r\n}\r\nexports.SensorSourceNode = SensorSourceNode;\r\n//# sourceMappingURL=SensorSourceNode.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(915);\n"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","Object","defineProperty","value","SensorSourceNode_1","SensorSourceNode_2","window","SensorSourceNode","core_1","SourceNode","constructor","options","_a","super","source","DataObject","uid","autoStart","once","start","bind","stop","requestPermission","Promise","resolve","sensorUID","addEventListener","event","dataFrame","DataFrame","frequency","interval","addSensor","Accelerometer","Acceleration","accelerationIncludingGravity","x","y","z","Gyroscope","AngularVelocity","rotationRate","beta","gamma","alpha","acceleration","getPosition","angularVelocity","getSensor","AbsoluteOrientationSensor","orientation","push","Orientation","fromEuler","logger","onPull","undefined","_subscriptions","Map","_values","_lastPush","_running","reject","all","sensors","map","sensor","getPermissions","permission","navigator","permissions","query","name","reduce","a","b","then","results","every","result","state","Error","catch","size","forEach","sensorInstance","findSensor","Math","round","set","_isUpdated","TimeService","now","createFrame","ex","Array","from","values","filter","timestamp","length","softStop","get","linearAcceleration","LinearAccelerationSensor","gyroscope","relativeOrientation","RelativeOrientationSensor","magnetometer","Magnetometer","sourceUID","AngularVelocityUnit","RADIAN_PER_SECOND","fromQuaternion","Quaternion","quaternion","Magnetism","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}