{"version":3,"file":"web/openhps-web-sensors.es.min.js","mappings":"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","sources":["webpack://@openhps/web-sensors/webpack/bootstrap","webpack://@openhps/web-sensors/webpack/runtime/define property getters","webpack://@openhps/web-sensors/webpack/runtime/hasOwnProperty shorthand","webpack://@openhps/web-sensors/external module \"./openhps-core.es.min.js\"","webpack://@openhps/web-sensors/./dist/esm/web/SensorSourceNode.js","webpack://@openhps/web-sensors/./dist/esm/legacy/SensorSourceNode.js","webpack://@openhps/web-sensors/./dist/esm/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"AbsoluteOrientationSensor\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.AbsoluteOrientationSensor, [\"Acceleration\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Acceleration, [\"Accelerometer\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Accelerometer, [\"AngularVelocity\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.AngularVelocity, [\"AngularVelocityUnit\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.AngularVelocityUnit, [\"DataFrame\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.DataFrame, [\"DataObject\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.DataObject, [\"Gyroscope\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Gyroscope, [\"LinearAccelerationSensor\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.LinearAccelerationSensor, [\"Magnetism\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Magnetism, [\"Magnetometer\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Magnetometer, [\"Orientation\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Orientation, [\"Quaternion\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.Quaternion, [\"RelativeOrientationSensor\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.RelativeOrientationSensor, [\"SourceNode\"]: () => __WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__.SourceNode });","/// <reference types=\"web\" />\nimport { SourceNode, Acceleration, Orientation, Quaternion, DataFrame, LinearAccelerationSensor as LinearAccelerationSensorObject, AbsoluteOrientationSensor as AbsoluteOrientationSensorObject, RelativeOrientationSensor as RelativeOrientationSensorObject, Magnetometer as MagnetometerObject, Gyroscope as GyroscopeObject, Accelerometer as AccelerometerObject, AngularVelocity, AngularVelocityUnit, Magnetism, } from '@openhps/core';\n/**\n * Sensor source node using Web Sensor API.\n */\nexport class SensorSourceNode extends SourceNode {\n    constructor(options) {\n        super(options);\n        this._subscriptions = new Map();\n        this._values = new Map();\n        this._lastPush = 0;\n        this._running = false;\n        this.options.interval = this.options.interval || 100;\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    static checkPermissions(sensors) {\n        return this.requestPermissions(sensors);\n    }\n    static requestPermissions(sensors) {\n        return new Promise((resolve, reject) => {\n            Promise.all(sensors\n                .map((sensor) => this.getPermissions(sensor).map((permission) => navigator.permissions.query({ name: permission })))\n                .reduce((a, b) => [...a, ...b]))\n                .then((results) => {\n                if (results.every((result) => result.state === 'granted')) {\n                    resolve(true);\n                }\n                else {\n                    resolve(false);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    requestPermissions() {\n        return SensorSourceNode.requestPermissions(this.options.sensors);\n    }\n    start() {\n        return new Promise((resolve) => {\n            this._running = true;\n            if (this._subscriptions.size > 0) {\n                return resolve();\n            }\n            this.options.sensors.forEach((sensor) => {\n                const SensorType = this.findSensor(sensor);\n                if (SensorType === undefined) {\n                    // Not supported\n                    return;\n                }\n                const sensorInstance = new SensorType({\n                    frequency: Math.round(1000 / this.options.interval),\n                });\n                sensorInstance.addEventListener('reading', (event) => {\n                    if (!this._running)\n                        return;\n                    this._values.set(sensor, event.target);\n                    if (this._isUpdated()) {\n                        this._lastPush = event.timeStamp;\n                        this.createFrame().catch((ex) => {\n                            this.logger('error', 'Unable to create sensor data frame!', ex);\n                        });\n                    }\n                });\n                sensorInstance.start();\n                this._subscriptions.set(sensor, sensorInstance);\n            });\n            resolve();\n        });\n    }\n    _isUpdated() {\n        return (Array.from(this._values.values()).filter((sensor) => sensor.timestamp > this._lastPush).length ===\n            Array.from(this._subscriptions.values()).filter((sensor) => sensor.activated).length);\n    }\n    stop() {\n        return new Promise((resolve) => {\n            if (this.options.softStop) {\n                this._running = false;\n            }\n            else {\n                this._subscriptions.forEach((value) => value.stop());\n                this._subscriptions = new Map();\n                this._values = new Map();\n            }\n            resolve();\n        });\n    }\n    createFrame() {\n        return new Promise((resolve) => {\n            const dataFrame = new DataFrame();\n            dataFrame.source = this.source;\n            const acceleration = this._values.get(AccelerometerObject);\n            const linearAcceleration = this._values.get(LinearAccelerationSensorObject);\n            const gyroscope = this._values.get(GyroscopeObject);\n            const orientation = this._values.get(AbsoluteOrientationSensorObject);\n            const relativeOrientation = this._values.get(RelativeOrientationSensorObject);\n            const magnetometer = this._values.get(MagnetometerObject);\n            const sourceUID = this.source ? this.source.uid : this.uid;\n            const frequency = 1000 / this.options.interval;\n            if (acceleration) {\n                dataFrame.addSensor(new AccelerometerObject(sourceUID + '_accel', new Acceleration(acceleration.x, acceleration.y, acceleration.z), frequency));\n            }\n            if (linearAcceleration) {\n                dataFrame.addSensor(new LinearAccelerationSensorObject(sourceUID + '_linearaccel', new Acceleration(linearAcceleration.x, linearAcceleration.y, linearAcceleration.z), frequency));\n            }\n            if (gyroscope) {\n                dataFrame.addSensor(new GyroscopeObject(sourceUID + '_gyro', new AngularVelocity(gyroscope.x, gyroscope.y, gyroscope.z, AngularVelocityUnit.RADIAN_PER_SECOND), frequency));\n            }\n            if (orientation) {\n                dataFrame.addSensor(new AbsoluteOrientationSensorObject(sourceUID + '_absoluteorientation', Orientation.fromQuaternion(new Quaternion(...orientation.quaternion)), frequency));\n            }\n            if (relativeOrientation) {\n                dataFrame.addSensor(new RelativeOrientationSensorObject(sourceUID + '_relativeorientation', Orientation.fromQuaternion(new Quaternion(...relativeOrientation.quaternion)), frequency));\n            }\n            if (magnetometer) {\n                dataFrame.addSensor(new MagnetometerObject(sourceUID + '_mag', new Magnetism(magnetometer.x, magnetometer.y, magnetometer.z), frequency));\n            }\n            this.push(dataFrame);\n            resolve();\n        });\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n    findSensor(sensor) {\n        switch (sensor) {\n            case RelativeOrientationSensorObject:\n                return RelativeOrientationSensor;\n            case AbsoluteOrientationSensorObject:\n                return AbsoluteOrientationSensor;\n            case LinearAccelerationSensorObject:\n                return LinearAccelerationSensor;\n            // case SensorType.AMBIENT_LIGHT:\n            //     return AmbientLightSensor;\n            case GyroscopeObject:\n                return Gyroscope;\n            case MagnetometerObject:\n                return window.Magnetometer; // Experimental\n            case AccelerometerObject:\n                return Accelerometer;\n            default:\n                return undefined;\n        }\n    }\n    static getPermissions(sensor) {\n        switch (sensor) {\n            // case SensorType.AMBIENT_LIGHT:\n            //     return [\"ambient-light-sensor\"];\n            case RelativeOrientationSensorObject:\n            case AbsoluteOrientationSensorObject:\n                return ['gyroscope', 'accelerometer', 'magnetometer'];\n            case GyroscopeObject:\n                return ['gyroscope'];\n            case MagnetometerObject:\n                return ['magnetometer'];\n            case LinearAccelerationSensorObject:\n            case AccelerometerObject:\n                return ['accelerometer'];\n            default:\n                return undefined;\n        }\n    }\n}\n//# sourceMappingURL=SensorSourceNode.js.map","import { Acceleration, AngularVelocity, DataFrame, Orientation, SourceNode, AbsoluteOrientationSensor as AbsoluteOrientationSensorObject, Gyroscope as GyroscopeObject, Accelerometer as AccelerometerObject, DataObject, } from '@openhps/core';\n/**\n * IMU source using the HTML5 browser API for device motion and device orientation.\n *\n * @category Source node\n */\nexport class SensorSourceNode extends SourceNode {\n    constructor(options) {\n        var _a;\n        super(options);\n        this.options.source = (_a = this.options.source) !== null && _a !== void 0 ? _a : new DataObject(this.uid);\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    requestPermission() {\n        return Promise.resolve();\n    }\n    start() {\n        return new Promise((resolve) => {\n            const sensorUID = this.source ? this.source.uid : this.uid;\n            window.addEventListener('devicemotion', (event) => {\n                // Create a new data frame for the orientation change\n                const dataFrame = new DataFrame();\n                const frequency = 1000 / event.interval;\n                dataFrame.addSensor(new AccelerometerObject(sensorUID + '_accl', new Acceleration(event.accelerationIncludingGravity.x, event.accelerationIncludingGravity.y, event.accelerationIncludingGravity.z), frequency));\n                dataFrame.addSensor(new GyroscopeObject(sensorUID + '_gyro', new AngularVelocity(event.rotationRate.beta, event.rotationRate.gamma, event.rotationRate.alpha), frequency));\n                dataFrame.addSensor(new AccelerometerObject(sensorUID + '_linearaccl', new Acceleration(event.acceleration.x, event.acceleration.y, event.acceleration.z), frequency));\n                const source = this.source;\n                source.getPosition().angularVelocity = dataFrame.getSensor(GyroscopeObject).value;\n                dataFrame.addSensor(new AbsoluteOrientationSensorObject(sensorUID + '_orientation', source.getPosition().orientation));\n                dataFrame.source = source;\n                this.push(dataFrame);\n            }, true);\n            window.addEventListener('deviceorientation', (event) => {\n                const source = this.source;\n                source.getPosition().orientation = Orientation.fromEuler([event.beta, event.gamma, event.alpha]);\n            });\n            this.logger('debug', 'Browser orientation and motion events registered!');\n            resolve();\n        });\n    }\n    stop() {\n        return Promise.resolve();\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n}\n//# sourceMappingURL=SensorSourceNode.js.map","import { SensorSourceNode } from './web/SensorSourceNode';\nimport { SensorSourceNode as SensorSourceNodeLegacy } from './legacy/SensorSourceNode';\nlet implementation = SensorSourceNode;\nif (!('Accelerometer' in window)) {\n    implementation = SensorSourceNodeLegacy;\n}\nexport { implementation as SensorSourceNode };\n//# sourceMappingURL=index.js.map"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","x","d","__WEBPACK_EXTERNAL_MODULE__openhps_core_es_min_js_27733f5f__","AbsoluteOrientationSensor","Acceleration","Accelerometer","AngularVelocity","AngularVelocityUnit","DataFrame","DataObject","Gyroscope","LinearAccelerationSensor","Magnetism","Magnetometer","Orientation","Quaternion","RelativeOrientationSensor","SourceNode","SensorSourceNode","constructor","options","super","this","_subscriptions","Map","_values","_lastPush","_running","interval","autoStart","once","start","bind","stop","static","sensors","requestPermissions","Promise","resolve","reject","all","map","sensor","getPermissions","permission","navigator","permissions","query","name","reduce","a","b","then","results","every","result","state","catch","size","forEach","SensorType","findSensor","undefined","sensorInstance","frequency","Math","round","addEventListener","event","set","target","_isUpdated","timeStamp","createFrame","ex","logger","Array","from","values","filter","timestamp","length","activated","softStop","value","dataFrame","source","acceleration","linearAcceleration","gyroscope","orientation","relativeOrientation","magnetometer","sourceUID","uid","addSensor","z","RADIAN_PER_SECOND","fromQuaternion","quaternion","push","onPull","window","_a","requestPermission","sensorUID","accelerationIncludingGravity","rotationRate","beta","gamma","alpha","getPosition","angularVelocity","getSensor","fromEuler","implementation"],"sourceRoot":""}