{"version":3,"file":"web/openhps-web-sensors.min.js","mappings":"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","sources":["webpack://OpenHPS.sensors/webpack/universalModuleDefinition","webpack://OpenHPS.sensors/./dist/cjs/legacy/SensorSourceNode.js","webpack://OpenHPS.sensors/./dist/cjs/web/SensorSourceNode.js","webpack://OpenHPS.sensors/external umd {\"commonjs\":\"@openhps/core\",\"commonjs2\":\"@openhps/core\",\"amd\":\"core\",\"root\":[\"OpenHPS\",\"core\"]}","webpack://OpenHPS.sensors/webpack/bootstrap","webpack://OpenHPS.sensors/./dist/cjs/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@openhps/core\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"OpenHPS\", [\"core\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OpenHPS\"] = factory(require(\"@openhps/core\"));\n\telse\n\t\troot[\"OpenHPS\"] = root[\"OpenHPS\"] || {}, root[\"OpenHPS\"][\"sensors\"] = factory(root[\"OpenHPS\"][\"core\"]);\n})((typeof self !== 'undefined' ? self : this), (__WEBPACK_EXTERNAL_MODULE__0__) => {\nreturn ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SensorSourceNode = void 0;\nconst core_1 = require(\"@openhps/core\");\n/**\n * IMU source using the HTML5 browser API for device motion and device orientation.\n *\n * @category Source node\n */\nclass SensorSourceNode extends core_1.SourceNode {\n    constructor(options) {\n        var _a;\n        super(options);\n        this.options.source = (_a = this.options.source) !== null && _a !== void 0 ? _a : new core_1.DataObject(this.uid);\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    requestPermission() {\n        return Promise.resolve();\n    }\n    start() {\n        return new Promise((resolve) => {\n            const sensorUID = this.source ? this.source.uid : this.uid;\n            window.addEventListener('devicemotion', (event) => {\n                // Create a new data frame for the orientation change\n                const dataFrame = new core_1.DataFrame();\n                const frequency = 1000 / event.interval;\n                dataFrame.addSensor(new core_1.Accelerometer(sensorUID + '_accl', new core_1.Acceleration(event.accelerationIncludingGravity.x, event.accelerationIncludingGravity.y, event.accelerationIncludingGravity.z), frequency));\n                dataFrame.addSensor(new core_1.Gyroscope(sensorUID + '_gyro', new core_1.AngularVelocity(event.rotationRate.beta, event.rotationRate.gamma, event.rotationRate.alpha), frequency));\n                dataFrame.addSensor(new core_1.Accelerometer(sensorUID + '_linearaccl', new core_1.Acceleration(event.acceleration.x, event.acceleration.y, event.acceleration.z), frequency));\n                const source = this.source;\n                source.getPosition().angularVelocity = dataFrame.getSensor(core_1.Gyroscope).value;\n                dataFrame.addSensor(new core_1.AbsoluteOrientationSensor(sensorUID + '_orientation', source.getPosition().orientation));\n                dataFrame.source = source;\n                this.push(dataFrame);\n            }, true);\n            window.addEventListener('deviceorientation', (event) => {\n                const source = this.source;\n                source.getPosition().orientation = core_1.Orientation.fromEuler([event.beta, event.gamma, event.alpha]);\n            });\n            this.logger('debug', 'Browser orientation and motion events registered!');\n            resolve();\n        });\n    }\n    stop() {\n        return Promise.resolve();\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n}\nexports.SensorSourceNode = SensorSourceNode;\n//# sourceMappingURL=SensorSourceNode.js.map","\"use strict\";\n/// <reference types=\"web\" />\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SensorSourceNode = void 0;\nconst core_1 = require(\"@openhps/core\");\n/**\n * Sensor source node using Web Sensor API.\n */\nclass SensorSourceNode extends core_1.SourceNode {\n    constructor(options) {\n        super(options);\n        this._subscriptions = new Map();\n        this._values = new Map();\n        this._lastPush = 0;\n        this._running = false;\n        this.options.interval = this.options.interval || 100;\n        if (this.options.autoStart) {\n            this.once('build', this.start.bind(this));\n        }\n        this.once('destroy', this.stop.bind(this));\n    }\n    static checkPermissions(sensors) {\n        return this.requestPermissions(sensors);\n    }\n    static requestPermissions(sensors) {\n        return new Promise((resolve, reject) => {\n            Promise.all(sensors\n                .map((sensor) => this.getPermissions(sensor).map((permission) => navigator.permissions.query({ name: permission })))\n                .reduce((a, b) => [...a, ...b]))\n                .then((results) => {\n                if (results.every((result) => result.state === 'granted')) {\n                    resolve(true);\n                }\n                else {\n                    resolve(false);\n                }\n            })\n                .catch(reject);\n        });\n    }\n    requestPermissions() {\n        return SensorSourceNode.requestPermissions(this.options.sensors);\n    }\n    start() {\n        return new Promise((resolve) => {\n            this._running = true;\n            if (this._subscriptions.size > 0) {\n                return resolve();\n            }\n            this.options.sensors.forEach((sensor) => {\n                const SensorType = this.findSensor(sensor);\n                if (SensorType === undefined) {\n                    // Not supported\n                    return;\n                }\n                const sensorInstance = new SensorType({\n                    frequency: Math.round(1000 / this.options.interval),\n                });\n                sensorInstance.addEventListener('reading', (event) => {\n                    if (!this._running)\n                        return;\n                    this._values.set(sensor, event.target);\n                    if (this._isUpdated()) {\n                        this._lastPush = event.timeStamp;\n                        this.createFrame().catch((ex) => {\n                            this.logger('error', 'Unable to create sensor data frame!', ex);\n                        });\n                    }\n                });\n                sensorInstance.start();\n                this._subscriptions.set(sensor, sensorInstance);\n            });\n            resolve();\n        });\n    }\n    _isUpdated() {\n        return (Array.from(this._values.values()).filter((sensor) => sensor.timestamp > this._lastPush).length ===\n            Array.from(this._subscriptions.values()).filter((sensor) => sensor.activated).length);\n    }\n    stop() {\n        return new Promise((resolve) => {\n            if (this.options.softStop) {\n                this._running = false;\n            }\n            else {\n                this._subscriptions.forEach((value) => value.stop());\n                this._subscriptions = new Map();\n                this._values = new Map();\n            }\n            resolve();\n        });\n    }\n    createFrame() {\n        return new Promise((resolve) => {\n            const dataFrame = new core_1.DataFrame();\n            dataFrame.source = this.source;\n            const acceleration = this._values.get(core_1.Accelerometer);\n            const linearAcceleration = this._values.get(core_1.LinearAccelerationSensor);\n            const gyroscope = this._values.get(core_1.Gyroscope);\n            const orientation = this._values.get(core_1.AbsoluteOrientationSensor);\n            const relativeOrientation = this._values.get(core_1.RelativeOrientationSensor);\n            const magnetometer = this._values.get(core_1.Magnetometer);\n            const sourceUID = this.source ? this.source.uid : this.uid;\n            const frequency = 1000 / this.options.interval;\n            if (acceleration) {\n                dataFrame.addSensor(new core_1.Accelerometer(sourceUID + '_accel', new core_1.Acceleration(acceleration.x, acceleration.y, acceleration.z), frequency));\n            }\n            if (linearAcceleration) {\n                dataFrame.addSensor(new core_1.LinearAccelerationSensor(sourceUID + '_linearaccel', new core_1.Acceleration(linearAcceleration.x, linearAcceleration.y, linearAcceleration.z), frequency));\n            }\n            if (gyroscope) {\n                dataFrame.addSensor(new core_1.Gyroscope(sourceUID + '_gyro', new core_1.AngularVelocity(gyroscope.x, gyroscope.y, gyroscope.z, core_1.AngularVelocityUnit.RADIAN_PER_SECOND), frequency));\n            }\n            if (orientation) {\n                dataFrame.addSensor(new core_1.AbsoluteOrientationSensor(sourceUID + '_absoluteorientation', core_1.Orientation.fromQuaternion(new core_1.Quaternion(...orientation.quaternion)), frequency));\n            }\n            if (relativeOrientation) {\n                dataFrame.addSensor(new core_1.RelativeOrientationSensor(sourceUID + '_relativeorientation', core_1.Orientation.fromQuaternion(new core_1.Quaternion(...relativeOrientation.quaternion)), frequency));\n            }\n            if (magnetometer) {\n                dataFrame.addSensor(new core_1.Magnetometer(sourceUID + '_mag', new core_1.Magnetism(magnetometer.x, magnetometer.y, magnetometer.z), frequency));\n            }\n            this.push(dataFrame);\n            resolve();\n        });\n    }\n    onPull() {\n        return new Promise((resolve) => {\n            resolve(undefined);\n        });\n    }\n    findSensor(sensor) {\n        switch (sensor) {\n            case core_1.RelativeOrientationSensor:\n                return RelativeOrientationSensor;\n            case core_1.AbsoluteOrientationSensor:\n                return AbsoluteOrientationSensor;\n            case core_1.LinearAccelerationSensor:\n                return LinearAccelerationSensor;\n            // case SensorType.AMBIENT_LIGHT:\n            //     return AmbientLightSensor;\n            case core_1.Gyroscope:\n                return Gyroscope;\n            case core_1.Magnetometer:\n                return window.Magnetometer; // Experimental\n            case core_1.Accelerometer:\n                return Accelerometer;\n            default:\n                return undefined;\n        }\n    }\n    static getPermissions(sensor) {\n        switch (sensor) {\n            // case SensorType.AMBIENT_LIGHT:\n            //     return [\"ambient-light-sensor\"];\n            case core_1.RelativeOrientationSensor:\n            case core_1.AbsoluteOrientationSensor:\n                return ['gyroscope', 'accelerometer', 'magnetometer'];\n            case core_1.Gyroscope:\n                return ['gyroscope'];\n            case core_1.Magnetometer:\n                return ['magnetometer'];\n            case core_1.LinearAccelerationSensor:\n            case core_1.Accelerometer:\n                return ['accelerometer'];\n            default:\n                return undefined;\n        }\n    }\n}\nexports.SensorSourceNode = SensorSourceNode;\n//# sourceMappingURL=SensorSourceNode.js.map","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SensorSourceNode = void 0;\nconst SensorSourceNode_1 = require(\"./web/SensorSourceNode\");\nconst SensorSourceNode_2 = require(\"./legacy/SensorSourceNode\");\nlet implementation = SensorSourceNode_1.SensorSourceNode;\nexports.SensorSourceNode = implementation;\nif (!('Accelerometer' in window)) {\n    exports.SensorSourceNode = implementation = SensorSourceNode_2.SensorSourceNode;\n}\n//# sourceMappingURL=index.js.map"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__0__","Object","defineProperty","value","SensorSourceNode","core_1","SourceNode","constructor","options","_a","super","source","DataObject","uid","autoStart","once","start","bind","stop","requestPermission","Promise","resolve","sensorUID","window","addEventListener","event","dataFrame","DataFrame","frequency","interval","addSensor","Accelerometer","Acceleration","accelerationIncludingGravity","x","y","z","Gyroscope","AngularVelocity","rotationRate","beta","gamma","alpha","acceleration","getPosition","angularVelocity","getSensor","AbsoluteOrientationSensor","orientation","push","Orientation","fromEuler","logger","onPull","undefined","_subscriptions","Map","_values","_lastPush","_running","static","sensors","requestPermissions","reject","all","map","sensor","getPermissions","permission","navigator","permissions","query","name","reduce","a","b","then","results","every","result","state","catch","size","forEach","SensorType","findSensor","sensorInstance","Math","round","set","target","_isUpdated","timeStamp","createFrame","ex","Array","from","values","filter","timestamp","length","activated","softStop","get","linearAcceleration","LinearAccelerationSensor","gyroscope","relativeOrientation","RelativeOrientationSensor","magnetometer","Magnetometer","sourceUID","AngularVelocityUnit","RADIAN_PER_SECOND","fromQuaternion","Quaternion","quaternion","Magnetism","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","SensorSourceNode_1","SensorSourceNode_2","implementation"],"sourceRoot":""}