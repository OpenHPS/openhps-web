import*as e from"./openhps-core.es.min.js";import*as t from"./openhps-rf.es.min.js";var s={d:(e,t)=>{for(var o in t)s.o(t,o)&&!s.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},o={};s.d(o,{G:()=>BLESourceNode});const r=(e=>{var t={};return s.d(t,e),t})({SourceNode:()=>e.SourceNode});const i=(e=>{var t={};return s.d(t,e),t})({BLEObject:()=>t.BLEObject,RFDataFrame:()=>t.RFDataFrame,RelativeRSSI:()=>t.RelativeRSSI});class BLESourceNode extends r.SourceNode{constructor(e){var t;super(e),this.options.source=null!==(t=this.options.source)&&void 0!==t?t:(new i.BLEObject).setUID(this.uid),this.once("build",this._onBleInit.bind(this)),this.once("destroy",this.stop.bind(this))}_onBleInit(){return new Promise(((e,t)=>{if(this.bluetooth=navigator.bluetooth,!this.bluetooth||!this.bluetooth.requestLEScan)return t(new Error("Bluetooth scanning is not supported!"));this.bluetooth.addEventListener("advertisementreceived",this.onAdvertisement.bind(this)),e()}))}requestPermission(){return new Promise((e=>{e()}))}start(){return new Promise(((e,t)=>{this.bluetooth.requestLEScan({acceptAllAdvertisements:!0,keepRepeatedDevices:!0,filters:this.options.filters}).then((t=>{this.scan&&this.scan.stop(),this.scan=t,e()})).catch(t)}))}stop(){this.scan&&this.scan.stop()}onPull(){return new Promise(((e,t)=>{this.start?e(void 0):this.start().then((()=>e(void 0))).catch(t)}))}onAdvertisement(e){this.logger("debug","BLE Advertisement",e);const t=new i.RFDataFrame,s=new i.BLEObject;s.uid=e.device.id,s.displayName=e.device.name;const o=Object.values(e.manufacturerData);o.length>0&&s.parseManufacturerData(o[0].buffer),t.addObject(s),t.source=this.source,t.source.relativePositions.forEach((e=>t.source.removeRelativePositions(e.referenceObjectUID))),t.source.addRelativePosition(new i.RelativeRSSI(s,e.rssi)),this.push(t)}}var n=o.G;export{n as BLESourceNode};
//# sourceMappingURL=openhps-web-bluetooth.es.min.js.map